"use strict";(self.webpackChunkdimension_stream_github_io=self.webpackChunkdimension_stream_github_io||[]).push([[231],{2231:(n,e,t)=>{t.r(e),t.d(e,{init:()=>en});var a,r,i=t(9477),o=t(9365),s=t(7114),c=t(4376),_=t(8761),u=t(5149),l=(new URLSearchParams(window.location.search).get("id"),78/180*Math.PI),d={camYBias:0,camZBias:0,eyeSizeBias:0};_.r.onGUIConstructed=function(n){var e=n.addFolder("VirtualHole");e.add(d,"eyeSizeBias",-10,10).step(.01),e.add(d,"camYBias",-10,10).step(.01),e.add(d,"camZBias",-10,10).step(.01),e.open()};var v=24.2;_.r.onCameraChanged=function(n){var e=n.video.videoWidth,t=n.video.videoHeight;Math.atan(Math.tan(l/2)*e/Math.sqrt(t*t+e*e)),Math.atan(Math.tan(l/2)*t/Math.sqrt(t*t+e*e)),a=[e,t],r=.5*Math.sqrt(a[0]*a[0]+a[1]*a[1])*Math.tan(.5*Math.PI-.5*l)};var m=[263,362],f=[33,133],x=6;function h(n){var e,t,i=n[0].keypoints[m[0]],o=n[0].keypoints[m[1]],s=n[0].keypoints[f[0]],c=n[0].keypoints[f[1]],_=function(n,e){var t=n.x-e.x,a=n.y-e.y;return Math.sqrt(t*t+a*a)},u=_(i,o),l=_(s,c),h=(e=Math.max(u,l),(v+d.eyeSizeBias)*r/e-d.camZBias),y=(t=[n[0].keypoints[x].x,n[0].keypoints[x].y],[Math.atan2(a[0]/2-t[0],r),Math.atan2(a[1]/2-t[1],r)]);return[Math.tan(y[0])*h,Math.tan(y[1])*h+d.camYBias,h+d.camZBias].map((function(n){return n/1e3}))}function y(n,e){return[n[0]-e[0],n[1]-e[1],n[2]-e[2]]}function p(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]}function z(n){var e=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);return n[0]/=e,n[1]/=e,n[2]/=e,n}var w=!1,b=[[0,0,0],[0,0,0],[0,0,0]],g=[[0,0,0],[0,0,0],[0,0,0]];var k,M,S,H=t(3644),P=function(n,e,t,a){return new(t||(t=Promise))((function(r,i){function o(n){try{c(a.next(n))}catch(n){i(n)}}function s(n){try{c(a.throw(n))}catch(n){i(n)}}function c(n){var e;n.done?r(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(o,s)}c((a=a.apply(n,e||[])).next())}))},V=function(n,e){var t,a,r,i,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(o=0)),o;)try{if(t=1,a&&(r=2&s[0]?a.return:s[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,s[1])).done)return r;switch(a=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,a=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(n,o)}catch(n){s=[6,n],a=0}finally{t=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},I=new i.cPb;I.matrixAutoUpdate=!1;var R=.621,T={Translation:{X:0,Y:0,Z:0},Rotation:{X:0,Y:0,Z:0},Scale:.05,"Use headtracking":!1};function A(){U===E&&requestAnimationFrame(U)}function C(n,e){var t=n.addFolder("Viewer");if(e){var a=t.addFolder("Transforms"),r=a.addFolder("Translation");r.add(T.Translation,"X",-.1,.1).step(.001).onChange(A),r.add(T.Translation,"Y",-.1,.1).step(.001).onChange(A),r.add(T.Translation,"Z",-.1,.1).step(.001).onChange(A),a.add(T,"Scale",.01,.1).step(.001).onChange(A)}t.add(T,"Use headtracking").onChange((function(n){return Y(n)})),t.open()}var F,D=new c.XS({width:300});D.domElement.id="gui",C(D,!0),_.r.onGUIConstructed=(F=_.r.onGUIConstructed,function(n){F(n),D.destroy(),C(n,!0),n.__folders.Backend.hide(),n.__folders.Model.hide(),n.__folders.Camera.close(),n.__folders.VirtualHole.close()});var U,q=new i.Tme;function B(){q.scale.set(T.Scale,T.Scale,T.Scale),q.position.set(T.Translation.X,T.Translation.Y,T.Translation.Z),q.updateMatrix()}function E(){U===E?(H.d.beginStats(),B(),console.log("normal rendering"),q.rotation.set(T.Rotation.X,T.Rotation.Y,T.Rotation.Z),q.updateMatrix(),k.render(M,S),H.d.endStats()):console.log("skipped rendering")}function W(){P(this,void 0,void 0,(function(){return V(this,(function(n){return[2,H.d.beginStats()]}))})).then(B).then((function(){return u.Dd(!1)})).then((function(n){if(null!=n&&n.length>0){var e=[(o=document.getElementById("volume-canvas")).clientWidth,o.clientHeight],t=function(n,e,t,a){void 0===a&&(a=!0),a&&(n=function(n){var e=1/4.125;if(w)return w=!1,g[0]=n,g[1]=n,b[0]=n,b[1]=n,n;var t=[(-.25*g[0][0]+.375*g[1][0]+n[0]+2*b[0][0]+b[1][0])*e,(-.25*g[0][1]+.375*g[1][1]+n[1]+2*b[0][1]+b[1][1])*e,(-.25*g[0][2]+.375*g[1][2]+n[2]+2*b[0][2]+b[1][2])*e];return g[1]=g[0],g[0]=t,b[1]=b[0],b[0]=n,t}(n));var r,i,o,s,c,_,u,l,d,v,m,f,x,h,k,M,S=-e/2,H=-t/2;return r=[S,H,0],i=[S+e,H,0],o=[S,H+t,0],s=[n[0],n[1],n[2]],c=.1,_=z(y(i,r)),u=z(y(o,r)),l=z(function(n,e){return[n[1]*e[2]-n[2]*e[1],n[2]*e[0]-n[0]*e[2],n[0]*e[1]-n[1]*e[0]]}(_,u)),d=y(r,s),v=y(i,s),m=y(o,s),f=-p(d,l),x=p(_,d)*c/f,h=p(_,v)*c/f,k=p(u,d)*c/f,M=p(u,m)*c/f,[[.2/(h-x),0,0,0,0,.2/(M-k),0,0,(h+x)/(h-x),(M+k)/(M-k),-10.1/9.9,-1,0,0,-2/9.9,0],[_[0],u[0],l[0],0,_[1],u[1],l[1],0,_[2],u[2],l[2],0,s[0],s[1],s[2],1]]}(h(n),R,R*e[1]/e[0]),a=(new i._fP).setFromEuler(new i.USm(T.Rotation.X,T.Rotation.Y,T.Rotation.Z)),r=(new i._fP).setFromRotationMatrix(S.matrixWorld.clone().invert());q.rotation.setFromQuaternion(r.multiply(a)),I.matrixWorld.fromArray(t[1]),I.matrixWorld.decompose(I.position,I.quaternion,I.scale),I.projectionMatrix.fromArray(t[0]),I.matrixWorldInverse.copy(I.matrixWorld).invert(),I.projectionMatrixInverse.copy(I.projectionMatrix).invert(),k.render(M,I)}var o;requestAnimationFrame(U)})).then((function(){return H.d.endStats()}))}var L=function(){return P(this,void 0,void 0,(function(){var n=this;return V(this,(function(e){return this.initialized||this.pending?[2,this.initialized]:(this.pending=!0,[2,_.S().then((function(){return n.pending=!1,n.initialized=!0,n.initialized}))])}))}))}.bind({initialized:!1,pending:!1});function Y(n){return P(this,void 0,void 0,(function(){return V(this,(function(e){return n?L().then((function(n){n&&(U=W,requestAnimationFrame(U))})):(U=E,requestAnimationFrame(U)),[2]}))}))}var Z=t(9530),j=new c.XS({width:300});j.domElement.id="gui",j.hide();var X={alpha_scale:0,max_alpha_scale:.01,min_alpha_scale:0},G=j.add(X,"alpha_scale",X.min_alpha_scale,X.max_alpha_scale).step(.001).onChange(A);j.add(X,"max_alpha_scale").onChange((function(n){G.max(n),G.step((X.max_alpha_scale-X.min_alpha_scale)/100),j.updateDisplay()})),j.add(X,"min_alpha_scale").onChange((function(n){G.min(n),G.step((X.max_alpha_scale-X.min_alpha_scale)/100),j.updateDisplay()}));var J,K,N=!0;onkeydown=function(n){"p"===n.key&&((N=!N)?(j.hide(),J.maxPolarAngle=.51*Math.PI,J.minPolarAngle=.3*Math.PI):(j.show(),J.maxPolarAngle=Math.PI,J.minPolarAngle=0))};var O,Q,$,nn={uniforms:{u_sh_min:{value:null},u_sh_max:{value:null},u_ref_intrinsics:{value:null},u_ref_V:{value:null},u_num_bands:{value:null},u_texture_sz:{value:null},u_block_sz:{value:null},u_block_dim:{value:null},u_data_0:{value:null},u_data_1:{value:null},u_data_2:{value:null},u_data_3:{value:null},u_data_4:{value:null},u_data_5:{value:null},u_data_6:{value:null},index_texture:{value:null},u_alpha_scale_debug:{value:null},u_aabb_min:{value:null},u_aabb_max:{value:null},transformMatrix:{value:null}},vertexShader:"\n    precision highp float;\n    uniform mat4 transformMatrix;\n    out vec3 v_rd_world;\n    out vec3 v_ro_world;\n    out vec2 vUv;\n    void main() {\n        // mat4 modifiedViewMatrix = viewMatrix * transformMatrix;\n        // v_ro_world = inverse(modifiedViewMatrix)[3].xyz;\n        // v_rd_world = (modelMatrix * vec4(position, 1.0)).xyz - v_ro_world;\n        // gl_Position = projectionMatrix * modifiedViewMatrix * modelMatrix * vec4(position, 1.0);\n        // vec4 position_world = modelMatrix * vec4(position, 1.0);\n        // v_rd_world = position_world.xyz - cameraPosition;\n        // gl_Position = projectionMatrix * viewMatrix * position_world;\n        vUv = uv;\n        gl_Position = vec4(position, 1.0);\n    }",fragmentShader:"\n    precision highp float;\n    precision highp sampler3D;\n    precision highp isampler3D;\n    uniform float u_sh_min[27];\n    uniform float u_sh_max[27];\n    uniform vec4 u_ref_intrinsics;\n    uniform mat4 u_ref_V;\n    uniform vec3 u_aabb_min;\n    uniform vec3 u_aabb_max;\n    uniform ivec3 u_texture_sz;\n    uniform ivec3 u_block_sz;\n    uniform ivec3 u_block_dim;\n    uniform int u_num_bands;\n    uniform sampler3D u_data_0;\n    uniform sampler3D u_data_1;\n    uniform sampler3D u_data_2;\n    uniform sampler3D u_data_3;\n    uniform sampler3D u_data_4;\n    uniform sampler3D u_data_5;\n    uniform sampler3D u_data_6;\n    uniform isampler3D index_texture;\n    uniform float u_alpha_scale_debug;\n    in vec3 v_rd_world;\n    in vec3 v_ro_world;\n    in vec2 vUv;\n\n    float k01 = 0.2820947918; // sqrt(  1/PI)/2\n    float k02 = 0.4886025119; // sqrt(  3/PI)/2\n    float k03 = 1.0925484306; // sqrt( 15/PI)/2\n    float k04 = 0.3153915652; // sqrt(  5/PI)/4\n    float k05 = 0.5462742153; // sqrt( 15/PI)/4\n\n    float SH_0_0(const vec3 n) { return  k01; }\n    float SH_1_0(const vec3 n) { return -k02 * n.y; }\n    float SH_1_1(const vec3 n) { return  k02 * n.z; }\n    float SH_1_2(const vec3 n) { return -k02 * n.x; }\n    float SH_2_0(const vec3 n) { return  k03 * n.x*n.y; }\n    float SH_2_1(const vec3 n) { return -k03 * n.y*n.z; }\n    float SH_2_2(const vec3 n) { return  k04 * (2.0*n.z*n.z-n.x*n.x - n.y*n.y); }\n    float SH_2_3(const vec3 n) { return -k03 * n.x*n.z; }\n    float SH_2_4(const vec3 n) { return  k05 * (n.x*n.x-n.y*n.y); }\n\n    struct Ray\n    {\n        vec3 ro;\n        vec3 rd;\n        vec3 rd_world;\n        float tmin;\n        float tmax;\n    };\n\n    void ray_find_bounds(inout Ray ray)\n    {\n        ray.tmin = 0.0;\n        ray.tmax = 2000.0;\n        vec3 grid_min = vec3(-1.0, -1.0, 0.0);\n        vec3 grid_max = vec3(1.0, 1.0, 1.0);\n        for (int i = 0; i < 3; ++i)\n        {\n            float invdir = 1.0 / ray.rd[i];\n            float t1 = (grid_min[i] - ray.ro[i]) * invdir;\n            float t2 = (grid_max[i]  - ray.ro[i]) * invdir;\n            if (ray.rd[i] != 0.f) {\n                ray.tmin = max(ray.tmin, min(t1, t2));\n                ray.tmax = min(ray.tmax, max(t1, t2));\n            }\n        }\n    }\n\n    void ray_to_ndc(const ivec2 sz, const vec4 ref_intrinsics, inout Ray ray)\n    {\n        const float near = 15.0;\n        float t = -(near + ray.ro.z) / ray.rd.z;\n\n        ray.ro = t * ray.rd + ray.ro;\n        ray.rd.x = -ref_intrinsics.x / (float(sz.x) / 2.0) * (ray.rd.x / ray.rd.z - ray.ro.x / ray.ro.z);\n        ray.rd.y = -ref_intrinsics.y / (float(sz.y) / 2.0) * (ray.rd.y / ray.rd.z - ray.ro.y / ray.ro.z);\n        ray.rd.z = -2.0 * near / ray.ro.z;\n\n        ray.ro.x = -ref_intrinsics.x / (float(sz.x) / 2.0) * (ray.ro.x / ray.ro.z);\n        ray.ro.y = -ref_intrinsics.y / (float(sz.y) / 2.0) * (ray.ro.y / ray.ro.z);\n        ray.ro.z = 1.0 + 2.0 * near / ray.ro.z;\n        ray.rd = normalize(ray.rd);\n    }\n\n    void px_f_to_ray(const vec2 px_f, const ivec2 sz, const mat4 V_inv, const mat4 ref_cam_V, const vec4 ref_intrinsics,\n            const vec4 cam, inout Ray ray)\n    {\n        const vec3 vs1 = vec3(0.0);\n        vec3 vs2;\n        {   \n            // float x = -(px_f.x - cam.z) / cam.x;\n            float x = (px_f.x - cam.z) / cam.x;\n            float y = (px_f.y - cam.w) / cam.y;\n            // float z = -sqrt(x * x + y * y + 1.0);\n            float z = sqrt(x * x + y * y + 1.0);\n            x /= z;\n            y /= z;\n            z = 1.0 / z;\n            // vs2 = vec3(-x, y, -z);\n            vs2 = vec3(x, y, z);\n        }\n        vec3 ws1 = (V_inv * vec4(vs1, 1.0)).xyz;\n        vec3 ws2 = (V_inv * vec4(vs2, 1.0)).xyz;\n        ray.rd_world = normalize(ws2 - ws1);\n        vec3 vs_start = (ref_cam_V * vec4(ws1, 1.0)).xyz;\n        vec3 vs_end = (ref_cam_V * vec4(ws2, 1.0)).xyz;\n\n        ray.ro = vs_start;\n        ray.rd = normalize(vs_end - vs_start);\n        ray_to_ndc(sz, ref_intrinsics, ray);\n        ray_find_bounds(ray);\n    }\n\n    float undiscretize_sh(const float sh, const int i)\n    {\n        return sh * (u_sh_max[i] - u_sh_min[i]) + u_sh_min[i];\n    }\n    \n    float undiscretize_alpha(const float discretized_alpha)\n    {\n        const float e = exp(1.0);\n        return 256.0*(exp(discretized_alpha)-1.0)/(e-1.0);\n    }\n    \n    vec4 get_color(vec3 rd, vec3 global_tx, int index)\n    {\n        vec4 c = vec4(0.0);\n        // Compute tx  \n        ivec3 sparse_offset = ivec3(\n            index % u_texture_sz.x,\n            (index / u_texture_sz.x) % u_texture_sz.y,\n            index / (u_texture_sz.x * u_texture_sz.y)\n        ) * (u_block_sz + 2);\n    \n        vec3 local_offset = mod(global_tx * vec3(u_block_dim*u_block_sz), float(u_block_sz)) + vec3(1);\n        vec3 tx = (vec3(sparse_offset) + local_offset) / vec3((u_block_sz + 2) * u_texture_sz);\n        // ivec3 stp = ivec3(round(global_tx * vec3(u_block_sz * u_block_dim) - 0.5));\n        // ivec3 local_offset_i = (stp % u_block_sz) + ivec3(1);\n        // ivec3 itx = sparse_offset + local_offset_i;\n    \n        //    c0  c1   c2   c3   c4   c5   c6    \n        // |000a|1112|2233|3444|5556|6677|7888|\n        // | SH0|   SH1    |       SH2        |\n        // (0)\n        {\n            vec4 w0 = texture(u_data_0, tx);\n            // vec4 w0 = texelFetch(u_data_0, itx, 0);\n            float sh00 = SH_0_0(rd);\n            c.x = undiscretize_sh(w0.x, 0) * sh00;\n            c.y = undiscretize_sh(w0.y, 1) * sh00;\n            c.z = undiscretize_sh(w0.z, 2) * sh00;\n            c.a = undiscretize_alpha(w0.w);\n        }\n        // (1-2)\n        if(u_num_bands >= 3)\n        {\n            vec4 w10_11 = texture(u_data_1, tx);\n            vec4 w11_12 = texture(u_data_2, tx);\n            vec4 w12_20 = texture(u_data_3, tx);\n            float sh10 = SH_1_0(rd);\n            float sh11 = SH_1_1(rd);\n            float sh12 = SH_1_2(rd);\n            c.x += undiscretize_sh(w10_11.x, 3) * sh10;\n            c.y += undiscretize_sh(w10_11.y, 4) * sh10;\n            c.z += undiscretize_sh(w10_11.z, 5) * sh10;\n            c.x += undiscretize_sh(w10_11.w, 6) * sh11;\n            //\n            c.y += undiscretize_sh(w11_12.x, 7) * sh11;\n            c.z += undiscretize_sh(w11_12.y, 8) * sh11;\n            c.x += undiscretize_sh(w11_12.z, 9) * sh12;\n            c.y += undiscretize_sh(w11_12.w, 10) * sh12;\n            //\n            c.z += undiscretize_sh(w12_20.x, 11) * sh12;\n            if(u_num_bands >= 7)\n            {\n                float sh20 = SH_2_0(rd);\n                c.x += undiscretize_sh(w12_20.y, 12) * sh20;\n                c.y += undiscretize_sh(w12_20.z, 13) * sh20;\n                c.z += undiscretize_sh(w12_20.w, 14) * sh20;\n            }\n        }\n        // (3-6)\n        if(u_num_bands >= 7)\n        {\n            vec4 w21_22 = texture(u_data_4, tx);\n            vec4 w22_23 = texture(u_data_5, tx);\n            vec4 w23_24 = texture(u_data_6, tx);\n            float sh21 = SH_2_1(rd);\n            float sh22 = SH_2_2(rd);\n            float sh23 = SH_2_3(rd);\n            float sh24 = SH_2_4(rd);\n    \n            c.x += undiscretize_sh(w21_22.x, 15) * sh21;\n            c.y += undiscretize_sh(w21_22.y, 16) * sh21;\n            c.z += undiscretize_sh(w21_22.z, 17) * sh21;\n            c.x += undiscretize_sh(w21_22.w, 18) * sh22;\n    \n            c.y += undiscretize_sh(w22_23.x, 19) * sh22;\n            c.z += undiscretize_sh(w22_23.y, 20) * sh22;\n            c.x += undiscretize_sh(w22_23.z, 21) * sh23;\n            c.y += undiscretize_sh(w22_23.w, 22) * sh23;\n    \n            c.z += undiscretize_sh(w23_24.x, 23) * sh23;\n            c.x += undiscretize_sh(w23_24.y, 24) * sh24;\n            c.y += undiscretize_sh(w23_24.z, 25) * sh24;\n            c.z += undiscretize_sh(w23_24.w, 26) * sh24;\n        }\n\n        c.x = max(0.0, c.x + 0.5);\n        c.y = max(0.0, c.y + 0.5);\n        c.z = max(0.0, c.z + 0.5);\n        return c;\n    }\n    \n    int get_index(vec3 tx)\n    {\n        ivec3 stp = ivec3(round(tx * vec3(u_block_dim) - 0.5));\n        return texelFetch(index_texture, stp, 0).x;\n        // return texture(index_texture, tx).x;\n    }\n    \n    float min_component(in vec3 v) {\n        return min(min(v.x, v.y), v.z);\n    }\n    \n    float max_component(in vec3  v) {\n        return max(max(v.x, v.y), v.z);\n    }\n    \n    // Intersect a ray with aabb where aabb.mix.xyz = -1, and aabb.max.xyz = 1.\n    // returns vec2(min_t, max_t).\n    vec2 boxIntersection(in vec3 ro, in vec3 rd) {\n        vec3 m = 1.0/rd;\n        vec3 n = ro*m;\n        vec3 t0 = -m - n;\n        vec3 t1 = m - n;\n        // isect if mint <= maxt;\n        return vec2(max_component(min(t0,t1)), min_component(max(t0,t1)));\n    }\n\n    vec2 aabbIntersection(in vec3 ro, in vec3 rd) {\n        vec3 m = 1.0/rd;\n        vec3 t0 = (u_aabb_min - ro)*m;\n        vec3 t1 = (u_aabb_max - ro)*m;\n        // isect if mint <= maxt;\n        return vec2(max_component(min(t0,t1)), min_component(max(t0,t1)));\n    }\n\n    vec3 to_texcoord(in vec3 pos)\n    {\n        return (pos - u_aabb_min)/(u_aabb_max - u_aabb_min);\n    }\n    \n    float hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n    const float E = 2.7182818284;\n    void main() {                        \n        //vec3 rd = normalize(v_rd_world);\n        //vec3 ro = v_ro_world;\n        //vec2 ti = aabbIntersection(v_ro_world, rd);\n        // vec2 px = gl_FragCoord.xy;\n        vec2 px = vUv * vec2(1008, 756);\n        Ray ray;\n        vec4 cam = u_ref_intrinsics;\n        cam.x = 1500.0;\n        cam.y = 1500.0;\n        mat4 V_inv = inverse(viewMatrix);\n        mat4 ref_cam_V = u_ref_V;\n        px_f_to_ray(px, ivec2(1008, 756), V_inv, ref_cam_V, u_ref_intrinsics, cam, ray);\n    \n        if (ray.tmin > ray.tmax)\n        {\n            gl_FragColor.xyz = vec3(0.0);// + exp(-V_i) * vec3(0.0);\n            gl_FragColor.a = 1.0;\n            return;\n        }\n\n        vec3 H = vec3(0.0);\n        float V_i = 0.0;\n        ivec3 grid_sz = u_block_sz * u_block_dim;\n        float dt = 0.5 / float(grid_sz.z);\n        // float t = ray.tmin;\n        // for(float t = max(ray.tmin, 0.0); (t < ray.tmax); t+=dt)\n        for(float t = ray.tmin; (t < ray.tmax); t+=dt)\n        // while (t < ray.tmax)\n        {\n            vec3 uv = ray.ro + t*ray.rd;\n            uv.x = 0.5 * uv.x + 0.5;\n            uv.y = 0.5 * uv.y + 0.5;\n            // if(pos.x <= (u_aabb_min.x + 0.01) ||\n            //    pos.y <= (u_aabb_min.y + 0.01) || \n            //    pos.z <= (u_aabb_min.z + 0.01) || \n            //    pos.x >= (u_aabb_max.x - 0.01) || \n            //    pos.y >= (u_aabb_max.y - 0.01) || \n            //    pos.z >= (u_aabb_max.z - 0.01) )\n            //    continue;\n\n            //vec3 uv = to_texcoord(pos);\n\n            int index = get_index(uv);\n            if (index < 0) continue;\n            vec4 c = get_color(-ray.rd_world, uv, index);\n            // a = 256.0*(exp(a)-1.0)/(E-1.0); // uint8(255*log((e-1)*clamp(v,0,S)/S + 1)), S=256\n            // if(a > 1.0)\n\n            if(c.a > 1e-8)\n            {\n                float v = c.a*0.01;\n                // if(u_alpha_scale_debug > 0.0)\n                //     c.rgb = c.aaa*vec3(u_alpha_scale_debug);\n                H += exp(-V_i) * (1.0 - exp(-v)) * c.rgb;\n                // H += exp(-V_i) * (1.0 - exp(-v)) * vec3(1.0, 0.0, 0.0);\n                // H = c.rgb; break;\n                V_i += v;\n            }\n\n\n            // if (exp(-V_i) < 1e-7) break;\n\n            // t += dt;\n        }\n        H += exp(-V_i) * vec3(0.5); // white bg\n        // // V_i = V_i*smoothstep(0.1, 1.0, V_i);\n        // H.x = 1.0;\n        gl_FragColor.xyz = H;// + exp(-V_i) * vec3(0.0);\n        // gl_FragColor.xyz = vec3(1.0, 0.0, 0.0);// + exp(-V_i) * vec3(0.0);\n        gl_FragColor.a = 1.0;\n    }\n    "};function en(n){var e=document.getElementById("volume-canvas"),t=[1008,756];(O=new i.CP7({antialias:!1,canvas:e})).setSize(t[0],t[1]),window.addEventListener("resize",tn),Q=new i.xsS,($=new i.cPb(60,t[0]/t[1],.001,1e3)).position.set(0,0,-15),$.lookAt(0,0,0),(J=new o.z($,O.domElement)).mouseButtons={LEFT:i.RsA.PAN,MIDDLE:i.RsA.DOLLY,RIGHT:i.RsA.PAN},J.maxPolarAngle=.51*Math.PI,J.minPolarAngle=.3*Math.PI,J.addEventListener("change",E),J.panSpeed=10,J.zoomSpeed=10,J.enableRotate=!1,Q.add($);var a,r=document.getElementById("progress"),c=document.getElementById("progress_bar"),_=document.getElementById("progress_text"),u=document.getElementById("progress_header"),l=new i.hH6;l.setRequestHeader({"Cache-Control":"no-cache"});var d="/3d_models/"+n+"/";l.setResponseType("json").loadAsync(d+"runtime_info.json").then((function(n){a=n})).then((function(n){var e=["index.bin.tar.gz"].concat(Array.from({length:a.num_bands},(function(n,e){return"grid_"+e+".bin.tar.gz"})));l.setResponseType("arraybuffer");var t={loaded:Array(e.length),total:Array(e.length),progress:function(n){function e(n,e){return n+e}this.loaded[this.i]=n.loaded,this.total[this.i]=n.total;var t=this.total.reduce(e),a=this.loaded.reduce(e)/t;_.innerHTML=Math.round(100*a)+"%",c.value=100*a},onProgress_i:function(n){return t.progress.bind({loaded:t.loaded,total:t.total,i:n})}};return Promise.all(e.map((function(n,e){return l.loadAsync(d+n,t.onProgress_i(e))})))})).then((function(n){return console.log("download done"),u.innerHTML="Unpacking",_.innerHTML="This may take a while...",new Promise((function(e,t){setTimeout((function(){e(n.map((function(n){return s.ec(new Uint8Array(n))})))}),300)}))})).then((function(n){return console.log("unpacking"),u.innerHTML="Reading data",_.innerHTML="...",Promise.all(n.map((function(n){return Z(n.buffer)})))})).then((function(n){console.log("untar");var e=n.map((function(n){return n[0].buffer})),t=new Int32Array(e[0]),o=e.slice(1).map((function(n){return new Uint8Array(n)})),s=i.rDY.clone(nn.uniforms);K=a.grid_half_side;var c=a.grid_offset.map((function(n,e){return n-K[e]})),_=a.grid_offset.map((function(n,e){return n+K[e]}));s.u_sh_min.value=a.sh_min[0],s.u_sh_max.value=a.sh_max[0],s.u_ref_intrinsics.value=a.ref_intrinsics,s.u_ref_V.value=a.ref_V,s.u_aabb_min.value=c,s.u_aabb_max.value=_,s.u_block_sz.value=a.block_sz,s.u_block_dim.value=a.block_dim;var u,l,d,v,m,f,x=(u=t,d=(l=a.block_dim)[0],v=l[1],m=l[2],(f=new i.JUT(u,d,v,m)).internalFormat="R32I",f.format=i.D9w,f.type=i.Kz5,f.magFilter=i.TyD,f.minFilter=i.TyD,f.wrapR=i.uWy,f.wrapS=i.uWy,f.wrapT=i.uWy,f.needsUpdate=!0,f.generateMipmaps=!1,f);s.index_texture.value=x,s.u_alpha_scale_debug.value=X.alpha_scale;var h=function(n,e){var t=e.map((function(n){return n+2})),a=n.length/4/(t[0]*t[1]*t[2]),r=Math.floor(2048/Math.max.apply(Math,t)),i=Math.min.apply(Math,t),o=[i+1,i+1,i+1];function s(n){return n[0]*n[1]*n[2]}for(var c=1;c<=r;c++)for(var _=c;_<=r;_++)for(var u=Math.max(Math.max(c,_),i);u<=r;u++){var l=[c,_,u];if(s(l)>=s(o))break;s(l)>=a&&(o=l)}return o}(o[0],a.block_sz);s.u_texture_sz.value=h,console.log("3D texture size: "+h),s.u_num_bands.value=a.num_bands,o.forEach((function(n,e){var t=function(n,e,t){for(var a=t.map((function(n){return n+2})),r=new Uint8Array(e[0]*a[0]*(e[1]*a[1])*(e[2]*a[2])*4).fill(0),o=0,s=0;s<e[2];s++)for(var c=0;c<e[1];c++)for(var _=0;_<e[0];_++)for(var u=0;u<a[2];u++)for(var l=0;l<a[1];l++)for(var d=0;d<a[0];d++)for(var v=a[0]*_+d,m=a[1]*c+l,f=(a[2]*s+u)*a[0]*e[0]*a[1]*e[1]+m*a[0]*e[0]+v,x=0;x<4;x++)o<n.length&&(r[4*f+x]=n[o],o++);var h=a[0]*e[0],y=a[1]*e[1],p=a[2]*e[2],z=new i.JUT(r,h,y,p);return z.format=i.wk1,z.type=i.ywz,z.magFilter=i.wem,z.minFilter=i.wem,z.wrapR=i.uWy,z.wrapS=i.uWy,z.wrapT=i.uWy,z.needsUpdate=!0,z.generateMipmaps=!1,z}(n,h,a.block_sz);s["u_data_"+e].value=t})),s.transformMatrix.value=(new i.yGw).identity();var y,p,z,w,b=new i.jyz({uniforms:s,vertexShader:nn.vertexShader,fragmentShader:nn.fragmentShader,depthWrite:!1,depthTest:!1}),g=new i.Kj0(new i._12(2,2),b);r.style.display="none",Q.add(g),y=O,p=Q,z=$,w=[0,Math.PI,0],H.d.setupStats(),k=y,M=p,S=z,T.Rotation.X=w[0],T.Rotation.Y=w[1],T.Rotation.Z=w[2],Y(T["Use headtracking"]),console.log("Loading done!")})).catch(console.log)}function tn(){var n=[1008,756];$.aspect=n[0]/n[1],$.updateProjectionMatrix(),O.setSize(n[0],n[1])}}}]);